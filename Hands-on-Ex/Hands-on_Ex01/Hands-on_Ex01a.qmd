---
title: "Hands-on Excercise 1"
date: "23/8/25"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# **1  Geospatial Data Science with R**

## **1.1 Learning Outcome**

-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,

-   importing geospatial data by using appropriate functions of **sf** package,

-   importing aspatial data by using appropriate function of **readr** package,

-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,

-   assigning or transforming coordinate systems by using using appropriate *sf* functions,

-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,

-   performing geoprocessing tasks by using appropriate functions of **sf** package,

-   performing data wrangling tasks by using appropriate functions of **dplyr** package and

-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.

## **1.2 Data Acquisition**

Data was taken from the following sources

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)

-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)

-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

## **1.3 Getting Started**

Loading libraries using pacman.

```{r}
pacman::p_load(sf, tidyverse)
```

## **1.4 Importing Geospatial Data**

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,

-   `CyclingPath`, a line feature layer in ESRI shapefile format, and

-   `PreSchool`, a point feature layer in kml file format.

### **1.4.1 Importing polygon feature data in shapefile format**

```{r}
mpsz = st_read(dsn = "data/geospatial",
               layer = "MP14_SUBZONE_WEB_PL")
```

The message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.

### **1.4.2 Importing polyline feature data in shapefile form**

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```

The message above reveals that there are a total of 4651 features and 19 fields in `cyclingpath` sf data frame. The geospatial entities are capture in *multilinestring* object. Similar to the *MP19_SUBZONE_WEB_PL* shape file, this data set is in in **svy21** projected coordinates system too.

### **1.4.3 Importing GIS data in kml format** 

Importing kml:

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

The message above reveals that `preschool` is a point feature data frame. There are a total of 2290 features and 2 fields. Different from the previous two simple feature data frame, preschool is in **wgs84** coordinates system.

## **1.5 Checking the Content of A Simple Feature Data Frame**

### **1.5.1 *st_geometry() –***

**`sfc`** (*simple feature column*). Each element in that column is a **geometry object** (`POINT`, `LINESTRING`, `POLYGON`, etc.).

`st_geometry()` knows how to look inside any sf object and fetch its geometry column safely.

```{r}
st_geometry(mpsz)
```

### **Working with glimpse()**

`glimpse()` report reveals the data type of each fields. 

```{r}
glimpse(mpsz)
```

### **Working with *head()***

`head()` is just **Base R’s** way of showing the *first n rows* of any data frame.

Since an **sf** object is still a data.frame (just with an extra geometry column), `head()` works the same way → it shows the first 5 features.

feature mean 'rows'

```{r}
head(mpsz, n=5) 
```

## **Plotting the Geospatial Data**

```{r}
plot(mpsz)

```

Only geometry

```{r}
plot(st_geometry(mpsz))

```

specific attribute:

```{r}
plot(mpsz["PLN_AREA_N"])

```

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschool), 
     add = TRUE)
```

Note that the preschool point objects failed to plot ontop of the mpsz layer. Do you know why?

Because preschool is in wgs 84

## **1.7 Working with Projection**

### **Assigning EPSG code to a simple feature data frame**

```{r}
st_crs(mpsz)
```

CRS is in SVY21

```{r}
mpsz <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz)
```

Notice that the EPSG code is 3414 now.

### **1.7.2 Transforming the projection of preschool from wgs84 to svy21.**

```{r}
st_geometry(preschool)
```

CRS is WGS 84. We will convert it to SVY 21

```{r}
preschool <- st_transform(preschool, 
                              crs = 3414)

```

```{r}
st_geometry(preschool)
```

CRS is now SVY21

Now, let us try to plot the preschool layer ontop of mpsz layer 

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschool), add = TRUE)
```

## **1.8 Importing and Converting An Aspatial Data**

Aspatioal data is data that contains x y coordinates in the fields of the datapoints

### **1.8.1 Importing the aspatial data**

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

it just wraps the tibble in a list.

```{r}
list(listings) 

```

The output reveals that `listing` tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude.` Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System

### **1.8.2 Creating a simple feature data frame from an aspatial data frame**

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

-   *coords* argument is the x-coordinates and y coord of the df

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

```{r}
glimpse(listings_sf)
```

`geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(listings_sf), add = TRUE)
```

## **1.9 Geoprocessing with sf package**

### **Use case 1: Land acquisition analysis**

#### The scenario

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

#### The solution

```{r}
buffer_cycling <- st_buffer(
  cyclingpath, dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

If you are tidyverse person like me, code chunk below should be used.

```{r}
buffer_cycling <- buffer_cycling %>%
  mutate(AREA = st_area(geometry))
```

```{r}
sum(buffer_cycling$AREA)
```

We can also create a plot showing the buffer by a selected planning subzone.

Assuming that we are interested on the land acquisition in Tampines West planning subzone.

Firstly, `filter()` of dplyr package will be used to extract polygon feature of Tampines West by using the code chunk below.

```{r}
mpsz_selected <- mpsz %>%
  filter(SUBZONE_N == "TAMPINES WEST") 
```

Next, `st_intersection()` of **sf** package will be used to clip cycling buffers within Tampines West planning subzone.

```{r}
buffer_cycling <- st_set_crs(buffer_cycling, 3414)
```

```{r}

buffer_cycling_selected <- st_intersection(
  buffer_cycling, mpsz_selected)
```

```{r}
plot(st_geometry(buffer_cycling_selected)) 
```

### **1.9.2 Use case 2: To determine the number of pre-schools by planning subzone**

#### 1.9.2.1 The scenario

The authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.

#### 1.9.2.2 The solution

Check how many of the geometries overlap

```{r}
mpsz$`PreSch Count`<- lengths(st_intersects(mpsz, preschool))
```

```{r}
summary(mpsz$`PreSch Count`)

```

```{r}
top_n(mpsz, 1, `PreSch Count`)
```

```{r}
mpsz$Area <- mpsz %>%
  st_area()
```

Add a field for preschool density

```{r}
mpsz <- mpsz %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

```{r}
hist(mpsz$`PreSch Density`)
```

```{r}
ggplot(data=mpsz, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning subzones with a single pre-school, on the other hand, \nthere are seven planning subzones with at least 30 or more pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

```{r}
ggplot(data=mpsz, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
